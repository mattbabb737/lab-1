---
title: "Lab 1 - Quarto Warmup & STAT 331 Review"
author: "Matt Babb"
format: html
embed-resources: true
editor: source
execute: 
  echo: true
  warning: false
  message: false
---

```{r}
#| label: packages-setup

library(tidyverse)
library(ggridges)
```

## Quarto

First, let's make sure you know how to use Markdown formatting to style a Quarto
document.

1.  **Make this text bold.**

2.  *Make this text italicized.*

3.  Make these into a bullet point list:

- Apples
- Bananas
- Potatoes

4.  Edit the YAML to remove warning messages from being output in the rendered
HTML file

5.  Using code chunk options, make it so this chunk shows the plot but not the
source code:

```{r}
#| echo: false
#| label: how_to_hide_code_but_show_plot

ggplot(data = mpg, 
       mapping = aes(y = manufacturer, x = hwy)) + 
  geom_boxplot() +
  labs(x = "",
       y = "", 
       title = "Highway Milage (mpg) for Different Car Manufacturers"
       )
```

6.  Using code chunk options, remove the messages about bandwidth
`geom_density_ridges()` chose to use:

```{r}
#| warning: false
#| label: how_to_remove_messages

ggplot(data = mpg, 
       mapping = aes(y = manufacturer, x = hwy)) + 
  geom_density_ridges() +
  labs(x = "",
       y = "", 
       title = "Highway Milage (mpg) for Different Car Manufacturers"
       )
```

7.  Using code chunk options, make it so that these plots are printed
side-by-side:

```{r}
#| layout-ncol: 2
#| label: how_to_plot_side_by_side

ggplot(data = mpg, 
       mapping = aes(y = manufacturer, x = hwy)) + 
  geom_boxplot() +
  labs(x = "",
       y = "", 
       title = "Highway Milage (mpg) for Different Car Manufacturers"
       )

ggplot(data = mpg, 
       mapping = aes(y = manufacturer, x = hwy)) + 
  geom_density_ridges() +
  labs(x = "",
       y = "", 
       title = "Highway Milage (mpg) for Different Car Manufacturers"
       )

```

8.  Using code chunk options, make it so this chunk shows the code but not the
output:

```{r}
#| results: "hide"
#| label: how_to_hide_results

2 + 2
```

9.  Using code chunk options, make it so the file can still knit even though
this chunk has an error

```{r}
#| error: true
#| label: how_to_render_even_with_errors

2 + a
```

10. Using code chunk options, create a descriptive `label` for each of the code
chunks above.

## Data Wrangling Review

Since you already seen some `ggplot`s, let's do a bit of review on data 
handling. In this class, we will exclusively make use of tools from the 
`tidyverse` suite of packages to perform our data cleaning and wrangling
operations. If you are less familiar with these packages or it's been some time
since you used them, I would strongly recommend referencing the function 
documentation!  

For these problems, we will continue to work with the `mpg` data frame, making
various changes to the data to clean it up. 

11. The `fl` variable describes the type of fuel for each car, with levels: `p`, 
`r`, `e`, `d`, and `c`. Do some research into what each of these labels mean! 
Then, use the `if_else()` function to create a new variable (`fuel_type`) with
two levels: `petrol` (any car using petrolium-based gas) and 
`alternative energy` (any car not using petrolium-based gas). 

```{r}
#| label: using `if_else()` to create new variable `fuel_type`

mpg <- mpg %>%
  mutate(fuel_type = if_else(fl %in% c("p", "r"),
                             "petrol",
                             "alternative_energy"))
```

12. The `drv` variable describes if the car has front drive (`f`), rear drive
(`r`), or four wheel drive (`4`). Let's make better labels for these values! 
Specifically, use the `case_when()` function to change the `drv` variable to have
the following levels: `front`, `rear`, `four wheel`. 

```{r}
#| label: using `case_when()` to rename `drv` cats

mpg <- mpg %>% 
  mutate(drv_label = case_when(
    drv == "f" ~ "front",
    drv == "r" ~ "rear",
    drv == "4" ~ "four wheel"
  ))
```

(string split + remove extra ")" )
13. The `trans` variable contains two pieces of information, (1) the
transmission style (`auto` or `manual`) and the specific type of transmission
(e.g., `l5`, `m5`). Using the `str_split()` function, create a new variable
(`trans_type`) containing the specific type of transmission of each car. Once
you've made this new variable, use the `rename()` function to change the name
of the `trans` column to `trans_style`.   
*Hint: You will need to deal with the stray parenthesis!* 

```{r}
#| label: using `str_split()` to separate transmission styles and transmission types

mpg <- mpg %>%
  mutate(
    trans_type = str_split (trans, pattern = "\\(", simplify = TRUE)[, 2],
    trans_type = str_remove(trans_type, "\\)")
  ) %>% 
  rename(trans_style = trans)
```

## Getting to know your classmates

14. Find someone who took Stat 331 from a different professor than you. Compare
your experiences. Tell me their name and professor. List one or two things that
you think you learned more about, and one or two things that they learned more
about.

**Name**  
Visruth

**Professor**  
Dr. Rehnberg

**Experience**  
Visruth and I had remarkably similar STAT331 experiences, since most of the material was shared between our professors. However, we did enter into the class with different levels of experience with R. Visruth had taken multiple classes that used R before STAT331, and he was comfortable with Git prior to starting. I on the other hand had only used R in STAT313, and I had never used Git. I had merely heard legends. This reflects the apparent familiarity that other students in my STAT331 class had with Git as well.  

Over the last year or two, he and I have also spent more time studying different aspects of programming. I seem to have spent more time learning about Shiny apps and wildly complicated plots (more on that as the quarter goes by), while he has spent more time focusing on object-oriented programming and modeling. He recently participated in Data Fest as well, which is a level of depth I aspire to reach.


15. Find someone in the class who **does not** share your birth month. Tell me
their name and birthday, and use R to find out how many days apart your
birthdays are.

**Name**  
Zach F.

**Distance from my birthday (in a given year)**
```{r}
#| label: calculating birthday distances using lubridate_1

mine_year <- ymd("2024-12-21")
Zachs_year <- ymd("2024-08-30")

days_apart_year <- abs(mine_year - Zachs_year)

days_apart_year
```

**Distance from my birthday (total)**
```{r}
#| label: calculating birthday distances using lubridate_2

mine_birth <- ymd("1992-12-21")
Zachs_birth <- ymd("2001-08-30")

days_apart_birth <- abs(as.numeric(Zachs_birth - mine_birth))

cat("Zach and I were born", days_apart_birth, "days apart.\n")
```